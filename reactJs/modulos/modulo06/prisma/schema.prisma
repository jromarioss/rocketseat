// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String   @id @default(uuid()) // id chave primaria, default preenche altomatico e será um uuid
  username   String   @unique // unique que é username unico sem duplicar
  name       String
  bio        String?  @db.Text
  email      String?  @unique
  avatar_url String?
  created_at DateTime @default(now()) // now um função do prima q preenche o campo com valor atual qnd for inserido no db

  accounts      Account[] // relacionamentos
  sessions      Session[]
  timeIntervals UserTimeInterval[]
  Scheduling    Scheduling[]

  @@map("users") //que a tabela tenha o nome em lowercase e no plural
}

model Account {
  id                 String  @id @default(cuid())
  user_id            String
  type               String
  provider           String
  provider_accountId String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_accountId])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@index([user_id])
  @@map("user_time_intervals")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String?
  created_at   DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@index([user_id])
  @@map("schedulings")
}
